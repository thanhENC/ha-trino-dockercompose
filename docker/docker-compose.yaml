# """
# Docker compose file for High Availability Trino cluster with OLTP database service
# Author: thanhENC (github.com/thanhENC)
# Contact: Van-An Dinh (linkedin.com/in/van-an-dinh)
# """

services:

  # ==================================================
  # OLTP database service: PostgreSQL AdventureWorks database
  # ==================================================
  oltp:
    image: postgres:15-alpine
    hostname: oltp
    container_name: oltp-adw14
    restart: always
    environment:
      POSTGRES_USER: ${OLTP_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${OLTP_DB_PASSWORD:-adventureworks}
      POSTGRES_DB: ${OLTP_DB_NAME:-adventureworks}
    ports:
      - ${OLTP_DB_PORT_EXPOSE}:5432
    volumes:
      - ./volumes/oltp:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - data-network

  # ==================================================
  # Trino: distributed SQL query engine for big data
  # Trino cluster service consists of Trino `coordinator` and `worker`
  # ==================================================
  # Trino coordinator service: client-facing service that accepts incoming queries
  trino-backup:
    container_name: trino-backup
    image: "trinodb/trino:455"
    hostname: trino-backup
    user: root
    profiles:
      - trino
    # restart: on-failure
    environment:
      # oltp catalog
      OLTP_DB_HOST: ${OLTP_DB_HOST:-oltp}
      OLTP_DB_PORT: ${OLTP_DB_PORT:-5432}
      OLTP_DB_NAME: ${OLTP_DB_NAME:-adventureworks}
      OLTP_DB_USER: ${OLTP_DB_USER:-adventureworks}
      OLTP_DB_PASSWORD: ${OLTP_DB_PASSWORD:-adventureworks}
    volumes:
      - ./trino/etc/jvm.config:/etc/trino/jvm.config
      - ./trino/etc/coordinator.config.properties:/etc/trino/config.properties
      - ./trino/etc/coordinator.node.properties:/etc/trino/node.properties
      - ./trino/etc/password-authenticator.properties:/etc/trino/password-authenticator.properties
      - ./trino/etc/password.db:/usr/lib/trino/pwd/password.db
      - ./trino/etc/access-control.properties:/etc/trino/access-control.properties
      - ./trino/etc/rules.json:/etc/rules.json
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/templates:/etc/trino-template
      - ./trino/trinoconfigcatalogs.sh:/docker-entrypoint-mount.sh
    entrypoint: [ "sh", "-c", "sed 's/\r$$//' /docker-entrypoint-mount.sh > /docker-entrypoint-clean.sh && chmod +x /docker-entrypoint-clean.sh && /docker-entrypoint-clean.sh && /usr/lib/trino/bin/run-trino" ]
    # ports:
    #   - ${TRINO_PORT_EXPOSE}:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - data-network

  trino:
    container_name: trino
    image: "trinodb/trino:455"
    hostname: trino
    user: root
    profiles:
      - trino
    # restart: on-failure
    environment:
      # oltp catalog
      OLTP_DB_HOST: ${OLTP_DB_HOST:-oltp}
      OLTP_DB_PORT: ${OLTP_DB_PORT:-5432}
      OLTP_DB_NAME: ${OLTP_DB_NAME:-adventureworks}
      OLTP_DB_USER: ${OLTP_DB_USER:-adventureworks}
      OLTP_DB_PASSWORD: ${OLTP_DB_PASSWORD:-adventureworks}
    volumes:
      - ./trino/etc/jvm.config:/etc/trino/jvm.config
      - ./trino/etc/coordinator.config.properties:/etc/trino/config.properties
      - ./trino/etc/coordinator.node.properties:/etc/trino/node.properties
      - ./trino/etc/password-authenticator.properties:/etc/trino/password-authenticator.properties
      - ./trino/etc/password.db:/usr/lib/trino/pwd/password.db
      - ./trino/etc/access-control.properties:/etc/trino/access-control.properties
      - ./trino/etc/rules.json:/etc/rules.json
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/templates:/etc/trino-template
      - ./trino/trinoconfigcatalogs.sh:/docker-entrypoint-mount.sh
    entrypoint: [ "sh", "-c", "sed 's/\r$$//' /docker-entrypoint-mount.sh > /docker-entrypoint-clean.sh && chmod +x /docker-entrypoint-clean.sh && /docker-entrypoint-clean.sh && /usr/lib/trino/bin/run-trino" ]
    # ports:
    #   - ${TRINO_PORT_EXPOSE}:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - data-network

  # Trino worker service: worker nodes that execute the query
  trino-worker:
    image: "trinodb/trino:455"
    profiles:
      - trino
    volumes:
      - ./trino/etc/jvm.config:/etc/trino/jvm.config
      - ./trino/etc/worker.config.properties:/etc/trino/config.properties
      - ./trino/etc/worker.node.properties:/etc/trino/node.properties
      - ./trino/catalog:/etc/trino/catalog
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - trino
    networks:
      - data-network

  # ==================================================
  # Certbot service: Let's Encrypt service for SSL certificates
  # use `docker-compose --profile certbot up` to start the certbot service.
  # ==================================================
  certbot:
    image: certbot/certbot
    profiles:
      - certbot
    container_name: certbot
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
      - ./volumes/certbot/logs:/var/log/letsencrypt
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live
      - ./certbot/update-cert.template.txt:/update-cert.template.txt
      - ./certbot/docker-entrypoint.sh:/docker-entrypoint.sh
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - CERTBOT_DOMAIN=${CERTBOT_DOMAIN}
      - CERTBOT_OPTIONS=${CERTBOT_OPTIONS:-}
    entrypoint: [ "/docker-entrypoint.sh" ]
    command: [ "tail", "-f", "/dev/null" ]

  # ==================================================
  # Nginx service: reverse proxy service
  # used for reverse proxying the Trino service and other web service.
  # ==================================================
  nginx:
    image: nginx:latest
    restart: always
    container_name: nginx
    profiles:
      - trino
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh
      - ./nginx/ssl:/etc/ssl # cert dir (legacy)
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live # cert dir (with certbot container)
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
    entrypoint: [ "sh", "-c", "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
      NGINX_HTTPS_ENABLED: ${NGINX_HTTPS_ENABLED:-false}
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}
      NGINX_PORT: ${NGINX_PORT:-80}
      # You're required to add your own SSL certificates/keys to the `./nginx/ssl` directory
      # and modify the env vars below in .env if HTTPS_ENABLED is true.
      NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-fullchain.pem}
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-privkey.pem}
      NGINX_SSL_PROTOCOLS: ${NGINX_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2 TLSv1.3}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
      NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
      NGINX_KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT:-65}
      NGINX_PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT:-3600s}
      NGINX_PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT:-3600s}
      NGINX_ENABLE_CERTBOT_CHALLENGE: ${NGINX_ENABLE_CERTBOT_CHALLENGE:-false}
      CERTBOT_DOMAIN: ${CERTBOT_DOMAIN:-}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NGINX_PORT:-80}"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      trino:
        condition: service_healthy
    ports:
      - "${EXPOSE_NGINX_PORT:-80}:${NGINX_PORT:-80}"
      - "${EXPOSE_NGINX_SSL_PORT:-443}:${NGINX_SSL_PORT:-443}"
    networks:
      - data-network

# ==================================================
# Networks configuration
# data-network: external network for data platform services. This network must be created before running the docker-compose file.
# use `docker network create --driver bridge data-network` to create the network.
# ==================================================
networks:
  data-network:
    external: true